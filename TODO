===========================================================================
   why QGraphicsItem(s) do need direct access to each other sometimes
===========================================================================
   the x,y position of a module is stored in the module property (backend) and is important for the QGraphicsScene/QGraphicsView basically.
   when talking about Qt MVC the Model translates backend items into frontend items. one backend item may have several frontend items.

   however, when moving a module using a drag'n'drop operation in the QGraphicsView the connections are redrawn immediately. this helps
   to create a good looking arrangement of items as the drawing happens as fast as possible - realtime. it is important to note that the model
   is not used while moving the item and therefore the graphical representation (frontend) and the acctual module (backend) are out of
   sync. this changes when the drag'n'drop operation is finished using the 'QGraphicsItem::ItemPositionHasChanged'-signal which will 
   write the new x,y coordinate to the backend immediately.
   
   altough it seems wise to do so, at least regarding the performance increase, it can result in pitfalls as it partially breaks the
   MVC pattern, which basically says: a graphical representation (a frontend item as a module or connection) may not read data from 
   another source than the model. since updating the connection depends on the position change information of a module (both frontend items)
   we break that rule by using another frontend item (the module) to be accessed by a connection and vice versa.

   the problem now is: how to solve the frontend dependancies without adding too much code and making the process of further code changes
   more error phrone.

   there are a few different ways:
   - slow: always use scene->items().contains(myItem) before acutally using that 'myItem'. this check would only check if that particular
     frontend item exists, before using it.

   - all frontend items could implement an 'reference counter' using smart pointers. the object exists until the last reference is removed

   - frontend items do register or unregister their references manually:
     this can be very complex and error phrone [CURRENTLY IMPLEMENTED]

   - extend all QGraphicsItems by inheriting also QObject, then use signals+slots

   problem viewed from the (frontend) module side:
     onModuleMove: foreach(module-port(s)-connection(s), Connection* c) c->updatePosition();

    I if a connection is removed, it has to inform the port to not request update(); anymore
   II if a module (therefore the ports are removed) each port has to inform the connection not to use it anymore (in case of I)
     




- fix: ~Model and removeRows(..)
  
- use QGraphicsPathItem

- profile drawing of items
 - fix: Connection boundingbox and geomeryabout_to_change... needs implementation
- fix QGraphicsItems
 - boundingbox issues
 - drawing could be nicer
- remake the selection indicator for the Module 
 - (the Connection looks nice already) but is tricky to select as the area is 1px

- remove QAbstractItemView class but keep the interface

- UserType = 65536 starts here, not a 0: fix this!
- fix all FIXME lines in all frontend classes
- FIXME: - have a look at Model::removeRows and Model::parent, there is some strange things going on, 
           especially with the halding of rootItem and QModelIndex()
         - the rootItem should return a valid QModelIndex() and rootItem->parent() should return QModelIndex()
- bug: if a module makes doubleuse of a outgoing port, one can NOT connect new connections to any input port of that module!
       however: if the second output usage is removed one can connect the input ports as expected, later the second output
                can be connected again...?!
       - this fails silently, create a debug message
       - this bug is in Model::insertConnection(..) for sure









=================================================================================
  Model related: Adding, selecting, changing, removing of single/multiple items:
=================================================================================
- CTRL+A should select all QGraphicsItems
- QTreeView is not expanded when loading modules via Document.cpp, is that a problem for later load/save?
- if a property changes(a child), the parent (module) should get updated in the GraphicsScene
- implement ItemView::dataChanged(..) -> GraphicsScene::moduleUpdated(..)
Q: who accesses 'module properties'?
A: a list of uses:
  - write property (the same as: initial creation of a property)
    - Module.cpp::updatePosition(..) when an item is moved from x,y to x',y'
    - Model.cpp::insertModule(..)
    - the modules export their properties as: Perlin would create 'frequency' and 'octave count'
    - QTreeView (this is an editor)
  - read property
    - ItemView.cpp to find the x,y position to place the QGraphicsItem
    - QTreeView (this is an editor)
- QTreeView editor for pos should split QPoint up into x and y component as it is done in assistant. is that compilicated?
- FIXME: in functions as insertModule: add a check to the parameters (done there, but i need to check other similar functions)
         this could avoid a lot of segfaults when inserting new concepts into the code
- property may be registered only once, fail with exit(1)!
- implement QSettings for QTreeView column width
    MainWidget::changeActiveDocument() -> replace by QSettings... treeView->setColumnWidth(0, 230);
- concept: see assistant, the QTreeView there is basically what i want to clone
- QTreeView: add tooltips
- QGraphicsItem->type() is complicated in design!
  i just want to retrive a QModelIndex i from a GraphicsItem (if there is one) this means checking for all types
  of known QGraphicsItems as Connection, Port or Module: see GraphicsScene.cpp










========================================================================
  Fixing QGraphicsItem(s) and the behaviour of the QGraphicsView:
========================================================================
- connection snapping, as indication when creating a new connection
- QStatusBar should receive messages, especially when loops are formed or connection attemps are done wrongly
- make items selectable with:
 - all items need to be selectable
  - adapt the connection selection from the automate project (with the wide bounding box, to make selection easier)
   - add a transparent 70% white fat paint below a connection
 - boundingbox selection
  - set bounding box selection using a modifier key, say ctrl
- clicking an item in the right list should focus the view of the graphicsscene over the respective item
- FIXME: insert modules at 'out of sight' will create strange view relocations...
         this happens when items (not connections) are inserted via Document.cpp
- QGraphicsItem(s) should be a QWidget (for module preview) so that one can scroll the view port of a noisegen right from there.
  + this would be cool as it would make editing much faster and more interactive
  + also resizing could be implemented, so one could increase the area which is viewed
- adding a connection (when no connection was added before whill relocate the view quite far away?!)
- using Document.cpp::Document()'s insertConnection will add scrollbars to the QGraphicsView... ;P
 - so i have to fix my QGraphicsView code once again
 - it's funny that clicking a item in the right side will now focus over the respecitive QGraphicsItem (didn't work before)
 - scrollbars should always be there
- softscroll to item instead of immediate focus

- implement singleselection:
  > if an item in the graphicsview is selected, the QTreeView should only show the respective properties of that item
  + if more items are selected, diplay all selected items
  + if no item is selected anymore, show all items in the QTreeView

- think about how to integrate custom pixmaps rendered by libnoise as preview per Module : QGraphicsItem

- fix regression: QTreeView modules can't be clicked to focus the QGraphicsView over it anymore
                  -> it does however work if there are no DataProperties...?!

- fix this:
MainWidget.cpp:
    //void QTreeView::setFirstColumnSpanned ( int row, const QModelIndex & parent, bool span )
    treeView->setFirstColumnSpanned(0, QModelIndex(), 1);
 -> but i want that be retrieved by data(..) but span is not used yet!

GraphicsView:
 - zoomin/zoomout (mwheel or +/-) and zoomfit (gui button)
 - move selected items should move the view if moved towards the border

- modput needs some redesigning, see modules which use more than one modput: transformer::displace
- also add a little 'x' button on the top right side of the module (similar to widgets)
- scrollbars in GraphicsView are currently disabled by the resizeEvent(..) implementation, maybe
  they should indicated the document width()/height() and making it work might be by using
  POSSIBLE FIX: centerOn(..) or scroll(..)
- QGraphicsItem(s) should be inserted with their respecitive 'center'. 
 - when inserting, either center the item itself or on insertion see width/height of the item
   and insert it at -width()/2,-height()/2
 - item must be inserted where the contextmenu popped up first, NOT where the cursor selects the actual module
   GraphicsScene.cpp ~ line 40
- when selecting a GraphicsItem using a click on the respecitive QTreeView item, the item should make an animation
- add icons to the QMenu for categories as well as for single modules













========================================================================
  General concepts to consider:
========================================================================
- Design choice:
  using min/max or select with libnoise can have interesting outcomes. the colorizer should know of which root the pixel was from to
  enable context sensitive coloring. this would be funny as one could create different effects on the same height. 
  imagine a landscape with flat hills. on top of the hills are various holes but these holes are textured differently.

- libNoiseAbstraction (frontend) need to be created
   WARNING: a property might have serious dependancies as: int 1,2,4,8 and if one set's 5 the libnoise library will create
            an exception which we most likely don't handle which will bring down the whole program.
            therefore: every property has to provide an input checker, which skips invalid input with some feedback.
- libNoise (backend) and

- integrate libNoise-view (first refactore it)

- integrate spring map exporter (smf or s3m)

- integrate height-colorizer and height-texturizer
  the height-colorizer is easy to implement and gives a basic look&feel for the heightmap
  the height-texturizer is basically the same but instead of applying a color it inserts
  textures, the textures do have a fixed orientation. later this might be adapted to reflect
  the gradient of the landscape and other parameters as wind-pressure artefacts in sand dunes...

- integrate xml save/load functionality (add an object serializer to all nodes in the graph)
  - load+save viewport-position in document
- fix copyright, linking to the library .... is that possible?

- integrate 3d viewer (adapted/copied from qlobby)

- include libnoise into this CMakeLists.txt (build it as well and use that)

- official release of 'the source as package'

- new moduels which might be nice:
 - rain simulation (also known as erosion)
 - blur filter (imagemagick filters in general, if they are arch-independant say 32vs64bit should output
                the same image, the same goes for intel vs spark)
