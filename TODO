------- current plan (near objectives): ------- 
- maybe refactor ~DataRoot and ~DataAbstractModules' code into the base class ~ destructor, to reduce code 
- make items selectable with:
 - all items need to be selectable
  - adapt the connection selection from the automate project (with the wide bounding box, to make selection easier)
 - boundingbox selection
  - set bounding box selection using a modifier key, say ctrl
 - a selection model should 'sync' select of items, in both views
- make items removable:
 - general:
  - create shortcuts for that as 'del'-key associated with the active selection
  - also add a little 'x' button on the top right side of the module (similar to widgets)
 - single items should be removable
 - a selection of several different items should be deletable
 - QTreeView should be able to handle multiple selection
 - QTreeView should have 'selection' enabled














- using Document.cpp::Document()'s insertConnection will add scrollbars to the QGraphicsView... ;P
 - so i have to fix my QGraphicsView code once again
 - it's funny that clicking a item in the right side will now focus over the respecitive QGraphicsItem (didn't work before)
- scrollbars in GraphicsView are currently disabled by the resizeEvent(..) implementation, maybe
  they should indicated the document width()/height() and making it work might be by using
  POSSIBLE FIX: centerOn(..) or scroll(..)
- QGraphicsItem(s) should be inserted with their respecitive 'center'. 
 - when inserting, either center the item itself or on insertion see width/height of the item
   and insert it at -width()/2,-height()/2
 - item must be inserted where the contextmenu popped up first, NOT where the cursor selects the actual module
   GraphicsScene.cpp ~ line 40
- fix QGraphicsItems
 - boundingbox issues
 - drawing could be nicer































- the model must be adapted to host two different hierarchy levels in abstraction, namely:
   CASE AAA                CASE BBB
  -rootNode                -rootNode
    |-module                 |-module
    | |-port-connection      | |-propertyA
    | |-port-connection      | |-propertyB
    |-module                 | |-propertyC
    | |-port-connection      | |-propertyD
    ...                      ...
  but how could that be done? maybe using a QSortFilterProxyModel?
  the PROBLEM is that hosting both different child-types (connection AND property) at once 
  isn't possible as far as i understand the QAbstractItemModel MVC concept.

  why do i need both again? case AAA is needed for the QGraphicsScene which is implemented as a 
  QAbstractItemView. this way we can distinguish between different types and we can count
  the rows to iterate over all items which need to be created in the QGraphicsScene, a working
  example is hosted here: 
   - http://invalidmagic.wordpress.com/2009/12/10/qgraphicsscene-used-as-a-qabstractitemmodel/

  case BBB is used for a QTreeView which does look like the data structure itself:
    + modulename (perlin noise)
      color       |  #afafaf
      pos         |  234,234
      ...
    + modulename (billow noise)
      color       |  #afafaf
      pos         |  234,234
      ...
  possible solution:
   i need another QAbstractItemModel "model2" accessing the first model "model1" as 'data'. the second model
   can use data(...) and setData(...) which will update it's data and as well as the other views data.
 ->> probably two proxymodels will do ;-)
- clicking an item in the right list should focus the view of the graphicsscene over the respective item
















- libNoise (backend) and
- libNoiseAbstraction (frontend) need to be created

- add all modules which are in libnoise
- integrate libNoise-view
- integrate spring map exporter
- simple export demo (smf)

- integrate height-colorizer and height-texturizer
  the height-c0olorizer is easy to implement and gives a basic look&feel for the heightmap
  the height-texturizer is basically the same but instead of applying a color it inserts
  textures, the textures do have a fixed orientation. later this might be adapted to reflect
  the gradient of the landscape and other parameters as wind-pressure artefacts in sand dunes...

- integrate xml save/load functionality (add an object serializer to all nodes in the graph)
- fix copyright, linking to the library .... is that possible?

- integrate 3d viewer
- include libnoise into this CMakeLists.txt (build it as well and use that)
- release the source as package (and i'm done)






------- modules todo: --------
utils modules
  NoiseMapBuilderPlane
  utils::RendererImage
  utils::Image

generator modules
 Checkerboard
 Const
 Cylinders
 Spheres
 Voronoi

combiner modules
 Add
 Max
 Min
 Multiply
 Power

modifier modules
 Abs
 Clamp
 Curve
 Exponent
 Invert
 ScaleBias
 Terrace

selector modules
 Blend
 Select
 
spring specific
 mapgenerator

new moduels which might be nice:
 - rain simulation (also known as erosion)
 - blur filter (imagemagick filters in general, if they are arch-independant say 32vs64bit should output
                the same image, the same goes for intel vs spark)

