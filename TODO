------- current plan (near objectives): ------- 
- implement ItemView::dataChanged(..) -> GraphicsScene::moduleUpdated(..)
- think about how to integrate custom pixmaps rendered by libnoise as preview per Module : QGraphicsItem
- if a property changes, the parent (module) should get updated in the GraphicsScene

Q: who accesses 'module properties'?
A: a list of uses:
  - write property (the same as: initial creation of a property)
    - Module.cpp::updatePosition(..) when an item is moved from x,y to x',y'
    - Model.cpp::insertModule(..)
    - the modules export their properties as: Perlin would create 'frequency' and 'octave count'
      WARNING: such a property might have serious dependancies as: int 1,2,4,8 and if one set's 5 the libnoise library will create
               an exception which we most likely don't handle which will bring down the whole program.
               therefore: every property has to provide an input checker, which skips invalid input with some feedback.
    - QTreeView (this is an editor)
  - read property
    - ItemView.cpp to find the x,y position to place the QGraphicsItem
    - QTreeView (this is an editor)

- QTreeView editor for pos should split QPoint up into x and y component as it is done in assistant. is that compilicated?
- concept: see assistant, the QTreeView there is basically what i want to clone
- fix regression: QTreeView modules can't be clicked to focus the QGraphicsView over it anymore
                  -> it does however work if there are no DataProperties...?!



GraphicsView:
 - zoomin/zoomout (mwheel) and zoomfit (gui button)
 - move selected items should move the view if moved towards the border




- fix this:
MainWidget.cpp:
    //void QTreeView::setFirstColumnSpanned ( int row, const QModelIndex & parent, bool span )
    treeView->setFirstColumnSpanned(0, QModelIndex(), 1);
 -> but i want that be retrieved by data(..) but span is not used yet!









Adding, selecting, removing of single/multiple items:
- FIXME: in functions as insertModule: add a check to the parameters (done there, but i need to check other similar functions)
         this could avoid a lot of segfaults when inserting new concepts into the code
- maybe refactor ~DataRoot and ~DataAbstractModules' code into the base class ~ destructor, to reduce code 
- make items selectable with:
 - all items need to be selectable
  - adapt the connection selection from the automate project (with the wide bounding box, to make selection easier)
 - boundingbox selection
  - set bounding box selection using a modifier key, say ctrl
- make items removable:
 - general:
  - create shortcuts for that as 'del'-key associated with the active selection
   - QTreeView:    (not implemented yet)
   - GraphicsView: skeletion for key input done
 - single items should be removable
 - a selection (of several different items) should be deletable
 - QTreeView should be able to handle multiple selection
 - QTreeView should have 'selection' enabled
- clicking an item in the right list should focus the view of the graphicsscene over the respective item
- using Document.cpp::Document()'s insertConnection will add scrollbars to the QGraphicsView... ;P
 - so i have to fix my QGraphicsView code once again
 - it's funny that clicking a item in the right side will now focus over the respecitive QGraphicsItem (didn't work before)
 - scrollbars should always be there
- Port.cpp should not be selectable (in QGraphicsView)









Fixing QGraphicsItem(s) and the behaviour of the QGraphicsView:
- also add a little 'x' button on the top right side of the module (similar to widgets)
- scrollbars in GraphicsView are currently disabled by the resizeEvent(..) implementation, maybe
  they should indicated the document width()/height() and making it work might be by using
  POSSIBLE FIX: centerOn(..) or scroll(..)
- QGraphicsItem(s) should be inserted with their respecitive 'center'. 
 - when inserting, either center the item itself or on insertion see width/height of the item
   and insert it at -width()/2,-height()/2
 - item must be inserted where the contextmenu popped up first, NOT where the cursor selects the actual module
   GraphicsScene.cpp ~ line 40
- fix QGraphicsItems
 - boundingbox issues
 - drawing could be nicer
- remake the selection indicator for the Module 
 - (the Connection looks nice already) but is tricky to select as the area is 1px






General:
-- - QTreeView: add tooltips
- DataType.h vs DataItemType.h


Design choice:
using min/max or select with libnoise can have interesting outcomes. the colorizer should know of which root the pixel was from to
enable context sensitive coloring. this would be funny as one could create different effects on the same height. 
imagine a landscape with flat hills. on top of the hills are various holes but these holes are textured differently.





- libNoiseAbstraction (frontend) need to be created
- libNoise (backend) and
- add all modules which are in libnoise (see list below)

- integrate libNoise-view (first refactore it)

- integrate graphics export
- integrate spring map exporter (smf or s3m)

- integrate height-colorizer and height-texturizer
  the height-colorizer is easy to implement and gives a basic look&feel for the heightmap
  the height-texturizer is basically the same but instead of applying a color it inserts
  textures, the textures do have a fixed orientation. later this might be adapted to reflect
  the gradient of the landscape and other parameters as wind-pressure artefacts in sand dunes...

- integrate xml save/load functionality (add an object serializer to all nodes in the graph)
- fix copyright, linking to the library .... is that possible?

- integrate 3d viewer (adapted/copied from qlobby)
- include libnoise into this CMakeLists.txt (build it as well and use that)
- official release of 'the source as package'










------- modules todo: --------
utils modules
  NoiseMapBuilderPlane
  utils::RendererImage
  utils::Image

generator modules
 Checkerboard
 Const
 Cylinders
 Spheres
 Voronoi

combiner modules
 Add
 Max
 Min
 Multiply
 Power

modifier modules
 Abs
 Clamp
 Curve
 Exponent
 Invert
 ScaleBias
 Terrace

selector modules
 Blend
 Select
 
spring specific
 mapgenerator

new moduels which might be nice:
 - rain simulation (also known as erosion)
 - blur filter (imagemagick filters in general, if they are arch-independant say 32vs64bit should output
                the same image, the same goes for intel vs spark)

